{"url": "367947", "code": "protected void handleProcessTimeout(String[] cmd) throws IOException {         StringBuilder bld   = new StringBuilder();         boolean       first = true;         for (String c : cmd) {             if (first) {                 first = false;             } else {                 bld.append(\" \");             }              String esc = Strings.escape(c);              // Quote where escaping is needed, OR the argument             // contains a literal space.             if (!c.equals(esc) || c.contains(\" \")) {                 bld.append('\\\"')                    .append(esc)                    .append('\\\"');             } else {                 bld.append(c);             }         }          throw new IOException(\"Process took too long: \" + bld.toString());     }\n", "docstring": "handle time process finishing\n", "func_name": "367947"}
{"url": "367948", "code": "private void addNewChild(String name, Object value) {         IntrospectionLevelMember prospectiveMember = new IntrospectionLevelMember(_level + 1, name, makeDescription(value), makeMember(value), _allKnownMembersInThisTree);         if (makeMember(value) != null) {             // OK, we'd like to introspect the object further - have we seen it?             if (_allKnownMembersInThisTree.contains(prospectiveMember)) {                 // Already seen it, so ensure we don't reexamine it                 prospectiveMember = new IntrospectionLevelMember(_level + 1, name, makeDescription(value), null, _allKnownMembersInThisTree);             } else {                 // Ensure we don't reexamine it if we see it again!                 _allKnownMembersInThisTree.add(prospectiveMember);             }         }         _children.add(prospectiveMember);     }\n", "docstring": "add introspection level member children list checking see child intro spec ted\n", "func_name": "367948"}
{"url": "367949", "code": "private int nextToken(int position) {         position = PatternProps.skipWhiteSpace(line, position);         if (position == line.length()) {             return -1;         }         int startpos = position;         char c = line.charAt(position++);         char quote = 0;         switch (c) {         case '\"':         case '\\'':             quote = c;             break;         case '#':             return -1;         default:             buf.append(c);             break;         }         int[] posref = null;         while (position < line.length()) {             c = line.charAt(position); // 16-bit ok             if (c == '\\\\') {                 if (posref == null) {                     posref = new int[1];                 }                 posref[0] = position+1;                 int c32 = Utility.unescapeAt(line, posref);                 if (c32 < 0) {                     throw new RuntimeException(\"Invalid escape at \" +                                                reader.describePosition() + ':' +                                                position);                 }                 UTF16.append(buf, c32);                 position = posref[0];             } else if ((quote != 0 && c == quote) ||                        (quote == 0 && PatternProps.isWhiteSpace(c))) {                 return ++position;             } else if (quote == 0 && c == '#') {                 return position; // do NOT increment             } else {                 buf.append(c);                 ++position;             }         }         if (quote != 0) {             throw new RuntimeException(\"Unterminated quote at \" +                                        reader.describePosition() + ':' +                                        startpos);         }         return position;     }\n", "docstring": "read next token line append tokens separated pattern whitespace tokens may also delimited single quotes closing quote must match opening quote encountered rest line ignored unless backslash escaped within quotes\n", "func_name": "367949"}
{"url": "367950", "code": "@Override    protected void adapt(LogLevel logLevel, String message, Class clazz)    {      Logger logger = Logger.getLogger(clazz);      Level level = convertToLog4jLevel(logLevel);      logger.log(DebugLogTee.class.getName(), level, message, null);    } @Override    protected void adapt(LogLevel logLevel, Throwable throwable, Class clazz)    {      Logger logger = Logger.getLogger(clazz);      Level level = convertToLog4jLevel(logLevel);      logger.log(DebugLogTee.class.getName(), level, throwable.getMessage(), throwable);    }\n", "docstring": "routes given information log system routes given information log system\n", "func_name": "367950"}
{"url": "367951", "code": "public List<CmsResource> getAllResources() {          List<CmsResource> result = Lists.newArrayList();         result.add(m_primaryResource);         for (CmsResource res : getSecondaryResources()) {             result.add(res);         }         return result;     }\n", "docstring": "gets list resources group primary secondary\n", "func_name": "367951"}
{"url": "367952", "code": "private boolean doDestroy() {         // Try to obtain the scan lock to destroy all associated monitors         // Other users of the scanLock should check the destroy flag         // before they release the lock to determine whether or not         // resources should be destroyed         if (scanLock.tryLock()) {             try {                 if (monitorState.compareAndSet(MonitorState.DESTROY.ordinal(), MonitorState.DESTROYED.ordinal())) {                     if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {                         Tr.event(this, tc, \"Destroy file monitor\");                     }                      for (UpdateMonitor m : updateMonitors.keySet()) {                         m.destroy();                     }                     updateMonitors.clear();                     // Clear any unnotified file changes, these will become invalid                     // as the monitors are destroyed.                     unnotifiedFileCreates.clear();                     unnotifiedFileDeletes.clear();                     unnotifiedFileModifies.clear();                      return true; // monitor was destroyed                 }             } finally {                 scanLock.unlock();             }         }          // Also return true if monitor was already destroyed         return monitorState.get() == MonitorState.DESTROYED.ordinal();     }\n", "docstring": "actually destroy monitors monitor state already set destroy\n", "func_name": "367952"}
{"url": "367953", "code": "public void doValidRecord(boolean bDisplayOption)     {         try {             if (m_recPackages == null)             {                 RecordOwner recordOwner = this.getOwner().findRecordOwner();                 m_recPackages = new Packages(recordOwner);                 if (recordOwner != null)                     recordOwner.removeRecord(m_recPackages);             }             String strPackagesTree = this.getOwner().getField(Packages.NAME).toString();             m_recPackages.addNew();             m_recPackages.getField(Packages.ID).moveFieldToThis(this.getOwner().getField(Packages.PARENT_FOLDER_ID));             while ((m_recPackages.getField(Packages.ID).getValue() > 0) && (m_recPackages.seek(null)))             {                 strPackagesTree = m_recPackages.getField(Packages.NAME).toString() + '.' + strPackagesTree;                 m_recPackages.getField(Packages.ID).moveFieldToThis(m_recPackages.getField(Packages.PARENT_FOLDER_ID));             }             m_fldTargetTree.setString(strPackagesTree);         } catch (DBException ex) {             ex.printStackTrace();         }                  super.doValidRecord(bDisplayOption);     }\n", "docstring": "called valid record read table query\n", "func_name": "367953"}
{"url": "367954", "code": "public static void onStop(Service service, Runnable terminatedCallback, Consumer<Throwable> failureCallback, Executor executor) {         ShutdownListener listener = new ShutdownListener(terminatedCallback, failureCallback);         service.addListener(listener, executor);          // addListener() will not invoke the callbacks if the service is already in a terminal state. As such, we need to         // manually check for these states after registering the listener and invoke the appropriate callback. The         // ShutdownListener will make sure they are not invoked multiple times.         Service.State state = service.state();         if (state == Service.State.FAILED) {             // We don't care (or know) the state from which we came, so we just pass some random one.             listener.failed(Service.State.FAILED, service.failureCause());         } else if (state == Service.State.TERMINATED) {             listener.terminated(Service.State.TERMINATED);         }     }\n", "docstring": "attaches given callback invoked given service enters terminated failed state callback optional may invoked synchronously service already one states\n", "func_name": "367954"}
{"url": "367955", "code": "private Resource<T> translateResourceExternal(Resource<T> resource) {         if (fullPath) {             return resource;         }         return new translatedResource<T>(resource, translatePathExternal(resource.getPath()));     }\n", "docstring": "expose resource path maps external path\n", "func_name": "367955"}
{"url": "367956", "code": "private W3CEndpointReference buildEndpoint(QName serviceName, String adress)             throws ServiceLocatorFault, InterruptedExceptionFault {         W3CEndpointReferenceBuilder builder = new W3CEndpointReferenceBuilder();         // builder.serviceName(serviceName);         builder.address(adress);         SLEndpoint endpoint = null;         try {             endpoint = locatorClient.getEndpoint(serviceName, adress);         } catch (ServiceLocatorException e) {             ServiceLocatorFaultDetail serviceFaultDetail = new ServiceLocatorFaultDetail();             serviceFaultDetail.setLocatorFaultDetail(serviceName.toString()                     + \"throws ServiceLocatorFault\");             throw new ServiceLocatorFault(e.getMessage(), serviceFaultDetail);         } catch (InterruptedException e) {             InterruptionFaultDetail interruptionFaultDetail = new InterruptionFaultDetail();             interruptionFaultDetail.setInterruptionDetail(serviceName                     .toString() + \"throws InterruptionFault\");             throw new InterruptedExceptionFault(e.getMessage(),                     interruptionFaultDetail);         }         if (endpoint != null) {             SLProperties properties = endpoint.getProperties();             if (properties != null && !properties.getPropertyNames().isEmpty()) {                 EndpointTransformerImpl transformer = new EndpointTransformerImpl();                  DOMResult result = new DOMResult();                 transformer.writePropertiesTo(properties, result);                 Document docResult = (Document) result.getNode();                  builder.metadata(docResult.getDocumentElement());             }         }         return builder.build();     }\n", "docstring": "build endpoint reference giving service name address\n", "func_name": "367956"}
{"url": "367957", "code": "public static KaryonServer forWebSocketServer(RxServer<? extends WebSocketFrame, ? extends WebSocketFrame> server, Module... modules) {         return forWebSocketServer(server, toBootstrapModule(modules));     } public static KaryonServer forWebSocketServer(RxServer<? extends WebSocketFrame, ? extends WebSocketFrame> server,                                                   BootstrapModule... bootstrapModules) {         return new RxNettyServerBackedServer(server, bootstrapModules);     }\n", "docstring": "creates link kary server combines lifecycle passed web sockets link server lifecycle creates link kary server combines lifecycle passed web sockets link server lifecycle\n", "func_name": "367957"}
{"url": "367958", "code": "protected boolean section()  { //  System.out.println(\"------------- section\");   // compute the value at the new sample point   double temp = stp;   stp = interpolate(pLow +t2*(pHi - pLow), pHi -t3*(pHi - pLow));   updated = true;   // save the previous step   if( !Double.isNaN(gp)) {    // needs to keep a step with a derivative    stprev = temp;    fprev = fp;    gprev = gp;   }    // see if there is a significant change in alpha   if( checkSmallStep() ) {    if( verbose != null )     verbose.println(\"WARNING: Small steps\");    return true;   }    function.setInput(stp);   fp = function.computeFunction();   gp = Double.NaN;    // check for convergence   if( fp > valueZero + ftol * stp *derivZero  || fp >= fLow) {    pHi = stp;   } else {    gp = function.computeDerivative();     // check for termination    if( Math.abs(gp) <= -gtol *derivZero )     return true;     if( gp *(pHi - pLow) >= 0 )     pHi = pLow;    // check on numerical prevision    if( Math.abs((pLow - stp)* gp) <= tolStep ) {     return true;    }    pLow = stp;    fLow = fp;   }    return false;  }\n", "docstring": "using found bracket alpha searches better estimate\n", "func_name": "367958"}
{"url": "367959", "code": "public static DoubleBinding log1p(final ObservableDoubleValue x) {         return createDoubleBinding(() -> Math.log1p(x.get()), x);     }\n", "docstring": "binding link java lang math log\n", "func_name": "367959"}
{"url": "367960", "code": "Collection<UmlDiagram> collectDiagrams() throws IOException {         if (diagramExtensions.isEmpty()) return Collections.emptySet();         try {             Files.walkFileTree(imagesDirectory.orElse(basedir).toPath(), this);             return unmodifiableCollection(collected.get());         } finally {             collected.remove();         }     }\n", "docstring": "collects generated diagram files walking specified path\n", "func_name": "367960"}
{"url": "367961", "code": "public Set<String> getIdAttributes(final BuildData buildData) {         final Set<String> ids = new HashSet<String>();          // Add all the level id attributes         for (final Level level : levels) {             ids.add(level.getUniqueLinkId(buildData.isUseFixedUrls()));         }          // Add all the topic id attributes         for (final Entry<Integer, List<ITopicNode>> topicEntry : topics.entrySet()) {             final List<ITopicNode> topics = topicEntry.getValue();             for (final ITopicNode topic : topics) {                 if (topic instanceof SpecTopic) {                     final SpecTopic specTopic = (SpecTopic) topic;                     ids.add(specTopic.getUniqueLinkId(buildData.isUseFixedUrls()));                 }             }         }          return ids;     }\n", "docstring": "get list attributes topics levels held database\n", "func_name": "367961"}
{"url": "367962", "code": "public static Set<Field> getFieldsAnnotatedWith(Object object, Class<? extends Annotation> annotation,    Class<? extends Annotation>... additionalAnnotations) {   return WhiteboxImpl.getFieldsAnnotatedWith(object, annotation, additionalAnnotations);  } public static Set<Field> getFieldsAnnotatedWith(Object object, Class<? extends Annotation>[] annotationTypes) {   return WhiteboxImpl.getFieldsAnnotatedWith(object, annotationTypes);  }\n", "docstring": "get fields annotated particular annotation method traverses class hierarchy checking annotation get fields annotated particular annotation method traverses class hierarchy checking annotation\n", "func_name": "367962"}
{"url": "367963", "code": "@CheckReturnValue     @BackpressureSupport(BackpressureKind.UNBOUNDED_IN)     @SchedulerSupport(SchedulerSupport.NONE)     public final Single<T> singleOrError() {         return RxJavaPlugins.onAssembly(new FlowableSingleSingle<T>(this, null));     }\n", "docstring": "returns single emits single item emitted flow able flow able emits single item otherwise flow able completes without emitting items link element exception signaled flow able emits one item code illegal argument exception signaled img width height https raw hub com wiki reactive java images operators single error png alt back pressure operator honors back pressure downstream consumes source code publisher unbounded manner without applying back pressure scheduler code single error operate default particular link scheduler\n", "func_name": "367963"}
{"url": "367964", "code": "public static Concatenator has(IHas val) {    Concatenator ret = P.has(val);    ASTNode an = APIObjectAccess.getAstNode(ret);    an.setClauseType(ClauseType.WHERE);    return ret;   }\n", "docstring": "div color red style font size color red cypher div div color red style font size color red tests existence node labels node relation properties div div color red style font size color red accepts expressions like property age div div color red style font size color red label swedish div div color red style font size color red property age div\n", "func_name": "367964"}
{"url": "367965", "code": "public static Object getRealTarget(Object target) {         if (target instanceof ProxyTarget) {             return ((ProxyTarget) target).getTarget();         }         return target;     }\n", "docstring": "check object special type link org ops pax wicket spi releasable proxy target return target\n", "func_name": "367965"}
{"url": "367966", "code": "private void _serializeDate(Date date, StringBuilder sb) throws ConverterException {  _serializeDateTime(new DateTimeImpl(date), sb);     }\n", "docstring": "serialize date\n", "func_name": "367966"}
{"url": "367967", "code": "public IPromise ordered(Function<T, IPromise> toCall) {         final IPromise result = toCall.apply((T) actors[index]);         index++;         if (index==actors.length)             index = 0;         if ( prev == null ) {             prev = new Promise();             result.then(prev);             return prev;         } else {             Promise p = new Promise();             prev.getNext().finallyDo((res, err) -> result.then((res1, err1) -> p.complete(res1, err1)));             prev = p;             return p;         }     }\n", "docstring": "calls given function round robin typical use\n", "func_name": "367967"}
{"url": "367968", "code": "public void checkAuthorization(Action action, ContainerRequestContext requestContext) throws NotAuthorizedException {   String clientApplicationName = (String)requestContext.getProperty(RequestHandler.APPSENSOR_CLIENT_APPLICATION_IDENTIFIER_ATTR);    ClientApplication clientApplication = appSensorServer.getConfiguration().findClientApplication(clientApplicationName);      appSensorServer.getAccessController().assertAuthorized(clientApplication, action, new Context());  }\n", "docstring": "check aut performing action\n", "func_name": "367968"}
{"url": "367969", "code": "static <K, V> RegularImmutableMap<K, V> fromEntryArray(int n, Entry<K, V>[] entryArray) {     checkPositionIndex(n, entryArray.length);     Entry<K, V>[] entries;     if (n == entryArray.length) {       entries = entryArray;     } else {       entries = createEntryArray(n);     }     int tableSize = Hashing.closedTableSize(n, MAX_LOAD_FACTOR);     ImmutableMapEntry<K, V>[] table = createEntryArray(tableSize);     int mask = tableSize - 1;     for (int entryIndex = 0; entryIndex < n; entryIndex++) {       Entry<K, V> entry = entryArray[entryIndex];       K key = entry.getKey();       V value = entry.getValue();       checkEntryNotNull(key, value);       int tableIndex = Hashing.smear(key.hashCode()) & mask;       @Nullable ImmutableMapEntry<K, V> existing = table[tableIndex];       // prepend, not append, so the entries can be immutable       ImmutableMapEntry<K, V> newEntry;       if (existing == null) {         boolean reusable =             entry instanceof ImmutableMapEntry && ((ImmutableMapEntry<K, V>) entry).isReusable();         newEntry =             reusable ? (ImmutableMapEntry<K, V>) entry : new ImmutableMapEntry<K, V>(key, value);       } else {         newEntry = new NonTerminalImmutableMapEntry<K, V>(key, value, existing);       }       table[tableIndex] = newEntry;       entries[entryIndex] = newEntry;       checkNoConflictInKeyBucket(key, newEntry, existing);     }     return new RegularImmutableMap<K, V>(entries, table, mask);   }\n", "docstring": "creates regular immutable map first entries entry array implementation may replace entries entry array entry objects though key value contents may take ownership entry array\n", "func_name": "367969"}
{"url": "367970", "code": "@Requires(\"name != null\")   @Ensures({     \"result != null\",     \"result == methodHandles.get(name)\"   })   protected List<MethodContractHandle> internMethod(String name) {     ArrayList<MethodContractHandle> handles = methodHandles.get(name);     if (handles == null) {       handles = new ArrayList<MethodContractHandle>();       methodHandles.put(name, handles);     }     return handles;   }\n", "docstring": "returns contract handle collection corresponding method named\n", "func_name": "367970"}
{"url": "367971", "code": "public final BaseDescr andRestriction() throws RecognitionException {   BaseDescr result = null;     Token lop=null;   BaseDescr left =null;   AnnotationDescr args =null;   BaseDescr right =null;    try {    // src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:406:3: (left= singleRestriction ( ( DOUBLE_AMPER ( fullAnnotation[null] )? operator )=>lop= DOUBLE_AMPER (args= fullAnnotation[null] )? right= singleRestriction )* )    // src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:406:5: left= singleRestriction ( ( DOUBLE_AMPER ( fullAnnotation[null] )? operator )=>lop= DOUBLE_AMPER (args= fullAnnotation[null] )? right= singleRestriction )*    {    pushFollow(FOLLOW_singleRestriction_in_andRestriction1881);    left=singleRestriction();    state._fsp--;    if (state.failed) return result;    if ( state.backtracking==0 ) { if( buildDescr  ) { result = left; } }    // src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:407:3: ( ( DOUBLE_AMPER ( fullAnnotation[null] )? operator )=>lop= DOUBLE_AMPER (args= fullAnnotation[null] )? right= singleRestriction )*    loop42:    while (true) {     int alt42=2;     int LA42_0 = input.LA(1);     if ( (LA42_0==DOUBLE_AMPER) ) {      int LA42_9 = input.LA(2);      if ( (synpred10_DRL5Expressions()) ) {       alt42=1;      }      }      switch (alt42) {     case 1 :      // src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:407:5: ( DOUBLE_AMPER ( fullAnnotation[null] )? operator )=>lop= DOUBLE_AMPER (args= fullAnnotation[null] )? right= singleRestriction      {      lop=(Token)match(input,DOUBLE_AMPER,FOLLOW_DOUBLE_AMPER_in_andRestriction1901); if (state.failed) return result;      if ( state.backtracking==0 ) { if ( isNotEOF() ) helper.emit( Location.LOCATION_LHS_INSIDE_CONDITION_OPERATOR ); }      // src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:409:13: (args= fullAnnotation[null] )?      int alt41=2;      int LA41_0 = input.LA(1);      if ( (LA41_0==AT) ) {       alt41=1;      }      switch (alt41) {       case 1 :        // src/main/resources/org/drools/compiler/lang/DRL5Expressions.g:409:13: args= fullAnnotation[null]        {        pushFollow(FOLLOW_fullAnnotation_in_andRestriction1922);        args=fullAnnotation(null);        state._fsp--;        if (state.failed) return result;        }        break;       }       pushFollow(FOLLOW_singleRestriction_in_andRestriction1927);      right=singleRestriction();      state._fsp--;      if (state.failed) return result;      if ( state.backtracking==0 ) { if( buildDescr  ) {                     ConstraintConnectiveDescr descr = ConstraintConnectiveDescr.newAnd();                     descr.addOrMerge( result );                     descr.addOrMerge( right );                     if ( args != null ) { descr.addAnnotation( args ); }                     result = descr;                 }               }      }      break;      default :      break loop42;     }    }     }    }    catch (RecognitionException re) {       throw re;   }    finally {    // do for sure before leaving   }   return result;  }\n", "docstring": "main resources org drools compiler lang expressions restriction returns based result left single restriction per full annotation null operator lop per arg full annotation null right single restriction\n", "func_name": "367971"}
{"url": "367972", "code": "public Color getForeground( int code )   {     Style s = _tokenStyles.get( new Integer( code ) );     if( s == null )     {       s = getStyle( DEFAULT_STYLE );     }     return getForeground( s );   }\n", "docstring": "fetch foreground color use lexical token given value\n", "func_name": "367972"}
{"url": "367973", "code": "protected void hidePopup() {          if (CmsDateConverter.validateTime(getTimeText())) {             // before hiding the date picker remove the date box popup from the auto hide partners of the parent popup             if (m_autoHideParent != null) {                 m_autoHideParent.removeAutoHidePartner(getElement());             }             m_popup.hide();             if (m_previewHandlerRegistration != null) {                 m_previewHandlerRegistration.removeHandler();             }             m_previewHandlerRegistration = null;         }     }\n", "docstring": "hides date time popup\n", "func_name": "367973"}
{"url": "367974", "code": "public void getInstrumentsForExchange(KiteConnect kiteConnect) throws KiteException, IOException {         // Get instruments for an exchange.         List<Instrument> nseInstruments = kiteConnect.getInstruments(\"CDS\");         System.out.println(nseInstruments.size());     }\n", "docstring": "get instruments desired exchange\n", "func_name": "367974"}
{"url": "367975", "code": "static final Entry getEntry (final String key, final Collection<Entry> entries) {          for (Entry e : entries)              if (e.matchKey(key)) return e;          return null;      }\n", "docstring": "returns first link entry specified link collection link entry match key string returns code code\n", "func_name": "367975"}
{"url": "367976", "code": "protected boolean doConnect(SocketAddress remoteAddress, SocketAddress localAddress) throws Exception {         if (localAddress instanceof InetSocketAddress) {             checkResolvable((InetSocketAddress) localAddress);         }          InetSocketAddress remoteSocketAddr = remoteAddress instanceof InetSocketAddress                 ? (InetSocketAddress) remoteAddress : null;         if (remoteSocketAddr != null) {             checkResolvable(remoteSocketAddr);         }          if (remote != null) {             // Check if already connected before trying to connect. This is needed as connect(...) will not return -1             // and set errno to EISCONN if a previous connect(...) attempt was setting errno to EINPROGRESS and finished             // later.             throw new AlreadyConnectedException();         }          if (localAddress != null) {             socket.bind(localAddress);         }          boolean connected = doConnect0(remoteAddress);         if (connected) {             remote = remoteSocketAddr == null?                     remoteAddress : computeRemoteAddr(remoteSocketAddr, socket.remoteAddress());         }         // We always need to set the localAddress even if not connected yet as the bind already took place.         //         // See https://github.com/netty/netty/issues/3463         local = socket.localAddress();         return connected;     }\n", "docstring": "connect remote peer\n", "func_name": "367976"}
{"url": "367977", "code": "public void marshall(RedshiftInstanceDetails redshiftInstanceDetails, ProtocolMarshaller protocolMarshaller) {          if (redshiftInstanceDetails == null) {             throw new SdkClientException(\"Invalid argument passed to marshall(...)\");         }          try {             protocolMarshaller.marshall(redshiftInstanceDetails.getFamily(), FAMILY_BINDING);             protocolMarshaller.marshall(redshiftInstanceDetails.getNodeType(), NODETYPE_BINDING);             protocolMarshaller.marshall(redshiftInstanceDetails.getRegion(), REGION_BINDING);             protocolMarshaller.marshall(redshiftInstanceDetails.getCurrentGeneration(), CURRENTGENERATION_BINDING);             protocolMarshaller.marshall(redshiftInstanceDetails.getSizeFlexEligible(), SIZEFLEXELIGIBLE_BINDING);         } catch (Exception e) {             throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);         }     }\n", "docstring": "marshall given parameter object\n", "func_name": "367977"}
{"url": "367978", "code": "public int getNumberOfOutputExecutionVertices() {    int retVal = 0;    final Iterator<ExecutionGroupVertex> it = this.stageMembers.iterator();   while (it.hasNext()) {     final ExecutionGroupVertex groupVertex = it.next();    if (groupVertex.isOutputVertex()) {     retVal += groupVertex.getCurrentNumberOfGroupMembers();    }   }    return retVal;  }\n", "docstring": "returns number output execution vertices stage number execution vertices connected vertices higher stage output channels\n", "func_name": "367978"}
{"url": "367979", "code": "public ChannelBuffer formatConfigV1(final Config config) {     TreeMap<String, String> map = new TreeMap<String, String>(config.getMap());     for (Map.Entry<String, String> entry : map.entrySet()) {       if (entry.getKey().toUpperCase().contains(\"PASS\")) {         map.put(entry.getKey(), \"********\");       }     }     return serializeJSON(map);   }\n", "docstring": "format running configuration\n", "func_name": "367979"}
{"url": "367980", "code": "public String getMemberValue(String name) {          if (m_childNodeMap == null) {              return null;          }          UNode childNode = m_childNodeMap.get(name);          return childNode != null && childNode.isValue() ? childNode.getValue() : null;      }\n", "docstring": "get value child value node member node given name map children child node given name child node value node null returned\n", "func_name": "367980"}
{"url": "367981", "code": "protected void addLength(Document doc, String propertyName, ValueData value, int propType)    {       long length = Util.getLength(value, propType);       if (length != -1)       {          doc.add(new Field(FieldNames.PROPERTY_LENGTHS, FieldNames.createNamedLength(propertyName, length),             Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));       }    }\n", "docstring": "adds link field names property lengths field code document code named length value\n", "func_name": "367981"}
{"url": "367982", "code": "public void actionUpdate() throws JspException {          // save initialized instance of this class in request attribute for included sub-elements         getJsp().getRequest().setAttribute(SESSION_WORKPLACE_CLASS, this);          try {             // prepare the publish scheduled resource             performDialogOperation();             // close the dialog             actionCloseDialog();         } catch (Throwable e) {             // show the error page             includeErrorpage(this, e);         }     }\n", "docstring": "performs resource operation called jsp page\n", "func_name": "367982"}
{"url": "367983", "code": "public static <T> ListBuilder<T> to( List<T> list)     {     return new ListBuilder<T>( list);     }\n", "docstring": "creates list builder object\n", "func_name": "367983"}
{"url": "367984", "code": "public static List<ModelAnnotation> buildAnnotationList(final Element element, final AnnotationFilter filter) {   final List<ModelAnnotation> annotationList=new ArrayList<>();      forEachAnnotations(element, filter, new AnnotationFoundListener() {     @Override    public void onAcceptAnnotation(Element executableMethod, String annotationClassName, Map<String, String> attributes) {     ModelAnnotation annotation = new ModelAnnotation(annotationClassName, attributes);          annotationList.add(annotation);    }   });      return annotationList;  }\n", "docstring": "builds annotation list\n", "func_name": "367984"}
{"url": "367985", "code": "public void execute(String sql, Object[] bindArgs, int connectionFlags,             CancellationSignal cancellationSignal) {         if (sql == null) {             throw new IllegalArgumentException(\"sql must not be null.\");         }          if (executeSpecial(sql, bindArgs, connectionFlags, cancellationSignal)) {             return;         }          acquireConnection(sql, connectionFlags, cancellationSignal); // might throw         try {             mConnection.execute(sql, bindArgs, cancellationSignal); // might throw         } finally {             releaseConnection(); // might throw         }     }\n", "docstring": "executes statement return result\n", "func_name": "367985"}
{"url": "367986", "code": "public static boolean isRevisionDumpFile(DumpContentType dumpContentType) {   if (WmfDumpFile.REVISION_DUMP.containsKey(dumpContentType)) {    return WmfDumpFile.REVISION_DUMP.get(dumpContentType);   } else {    throw new IllegalArgumentException(\"Unsupported dump type \"      + dumpContentType);   }  }\n", "docstring": "returns given dump file type contains page revisions false dumps contain pages auxiliary information linked sites\n", "func_name": "367986"}
{"url": "367987", "code": "public synchronized void removeProtocol(String productString, ChannelListener<? super StreamConnection> openListener) {         List<Holder> holders = handlers.get(productString);         if (holders == null) {             return;         }         Iterator<Holder> it = holders.iterator();         while (it.hasNext()) {             Holder holder = it.next();             if (holder.channelListener == openListener) {                 holders.remove(holder);                 break;             }         }         if (holders.isEmpty()) {             handlers.remove(productString);         }     } public synchronized void removeProtocol(String productString, HttpUpgradeListener upgradeListener) {         List<Holder> holders = handlers.get(productString);         if (holders == null) {             return;         }         Iterator<Holder> it = holders.iterator();         while (it.hasNext()) {             Holder holder = it.next();             if (holder.listener == upgradeListener) {                 holders.remove(holder);                 break;             }         }         if (holders.isEmpty()) {             handlers.remove(productString);         }     }\n", "docstring": "remove protocol handler remove protocol handler\n", "func_name": "367987"}
{"url": "367988", "code": "public void updateGalleryData(CmsContainerPageGalleryData galleryData, boolean viewChanged) {          if (m_dialog != null) {             if (viewChanged) {                 m_dialog.removeFromParent();                 m_dialog = null;             } else {                 m_dialog.updateGalleryData(galleryData.getGalleryData());             }         }         m_galleryData = galleryData.getGalleryData();         m_search = galleryData.getGallerySearch();     }\n", "docstring": "updates gallery data\n", "func_name": "367988"}
{"url": "367989", "code": "@Service     public List<Task> getTasks(String taskType, String startKey, Integer count) {         return executionService.getTasks(taskType, startKey, count);     }\n", "docstring": "get progress tasks results paginated\n", "func_name": "367989"}
{"url": "367990", "code": "public boolean isConsistent() {         for (int i = 1; i < filledUpTo; i++) {             int comp1 = KeyUtils.compareKey(maxKeyPerChunk[i], maxKeyPerChunk[i - 1]);             if (comp1 <= 0) {                 return false;             }         }         return true;     }\n", "docstring": "checks index consistent inserted keys inserted increment ally\n", "func_name": "367990"}
{"url": "367991", "code": "public InboundResourceadapterType<ResourceadapterType<T>> getOrCreateInboundResourceadapter()    {       Node node = childNode.getOrCreate(\"inbound-resourceadapter\");       InboundResourceadapterType<ResourceadapterType<T>> inboundResourceadapter = new InboundResourceadapterTypeImpl<ResourceadapterType<T>>(this, \"inbound-resourceadapter\", childNode, node);       return inboundResourceadapter;    }\n", "docstring": "already created code inbound resource adapter code element given value created otherwise existing code inbound resource adapter code element returned\n", "func_name": "367991"}
{"url": "367992", "code": "public static void pipe(Reader reader, Writer writer, int buffersize) throws IOException {         char[] buffer = new char[buffersize];         while (reader.read(buffer) != -1) {             writer.write(buffer);         }     } public static void pipe(InputStream is, OutputStream os, int buffersize) throws IOException {         byte[] buffer = new byte[buffersize];         while (is.read(buffer) != -1) {             os.write(buffer);         }     }\n", "docstring": "writes lines read reader writes lines read reader\n", "func_name": "367992"}
{"url": "367993", "code": "public void marshall(InstanceFleetStatus instanceFleetStatus, ProtocolMarshaller protocolMarshaller) {          if (instanceFleetStatus == null) {             throw new SdkClientException(\"Invalid argument passed to marshall(...)\");         }          try {             protocolMarshaller.marshall(instanceFleetStatus.getState(), STATE_BINDING);             protocolMarshaller.marshall(instanceFleetStatus.getStateChangeReason(), STATECHANGEREASON_BINDING);             protocolMarshaller.marshall(instanceFleetStatus.getTimeline(), TIMELINE_BINDING);         } catch (Exception e) {             throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);         }     }\n", "docstring": "marshall given parameter object\n", "func_name": "367993"}
{"url": "367994", "code": "@Override     public void doExceptionCaughtListeners(final long sessionId, final Throwable cause) {         runManagementTask(new Runnable() {             @Override             public void run() {                 try {                     // The particular management listeners change on strategy, so get them here.                     for (final GatewayManagementListener listener : getManagementListeners()) {                         listener.doExceptionCaught(GatewayManagementBeanImpl.this, sessionId);                     }                      markChanged();  // mark ourselves as changed, possibly tell listeners                 } catch (Exception ex) {                     logger.warn(\"Error during exceptionCaught gateway listener notifications:\", ex);                 }             }         });     }\n", "docstring": "notify management listeners filter write note starts thread runs task thread\n", "func_name": "367994"}
{"url": "367995", "code": "public void deleteShape(Paintable paintable, Object group, MapContext context) {   GfxGeometry gfxGeometry = (GfxGeometry) paintable;   Geometry geom = gfxGeometry.getGeometry();   if (geom instanceof Point || geom instanceof MultiPoint) {    context.getVectorContext().deleteElement(group, gfxGeometry.getId() + \".def\");   }   if (geom instanceof MultiPolygon || geom instanceof MultiLineString || geom instanceof MultiPoint) {    GraphicsContext gc = context.getVectorContext();    String gfxId = gfxGeometry.getId();    for (int i = 0; i < geom.getNumGeometries(); i++) {     gc.deleteElement(group, gfxId + \".\" + i);    }   } else {    context.getVectorContext().deleteElement(group, gfxGeometry.getId());   }  }\n", "docstring": "delete link paint able object given link map context object exist nothing done\n", "func_name": "367995"}
{"url": "367996", "code": "public OrientGraphNoTx getNoTx() {     final OrientGraphNoTx g;      if (pool == null) {       g = (OrientGraphNoTx) getNoTxGraphImplFactory().getGraph(getDatabase(), user, password, settings);     } else {       // USE THE POOL       g = (OrientGraphNoTx) getNoTxGraphImplFactory().getGraph(pool, settings);     }      initGraph(g);     return g;   }\n", "docstring": "gets non transactional graph database pool pool configured otherwise creates graph instance graph instance inherits factory configuration\n", "func_name": "367996"}
{"url": "367997", "code": "public void setContentLength(final int contentLength) throws MaxMessageSizeExceededException {         if (contentLength > this.maxAllowedContentLength) {             throw new MaxMessageSizeExceededException(\"Content length exceeds the maximum allowed length\");         }         this.contentLength = contentLength;         this.payload = new byte[contentLength];     }\n", "docstring": "set expected content length message value comes content length header exceeding maximum allowed payload length throw link max message size exceeded exception\n", "func_name": "367997"}
{"url": "367998", "code": "private void processSplitPage(List<BTreePage> splitResult, PageModificationContext context) {         PageWrapper originalPage = context.getPageWrapper();         for (int i = 0; i < splitResult.size(); i++) {             val page = splitResult.get(i);             ByteArraySegment newPageKey;             long newOffset;             long minOffset;             PageWrapper processedPage;             if (i == 0) {                 // The original page will be replaced by the first split. Nothing changes about its pointer key.                 originalPage.setPage(page);                 newPageKey = originalPage.getPageKey();                 context.getPageCollection().complete(originalPage);                 processedPage = originalPage;             } else {                 // Insert the new pages and assign them new virtual offsets. Each page will use its first                 // Key as a Page Key.                 newPageKey = page.getKeyAt(0);                 processedPage = PageWrapper.wrapNew(page, originalPage.getParent(), new PagePointer(newPageKey, PagePointer.NO_OFFSET, page.getLength()));                 context.getPageCollection().insert(processedPage);                 context.getPageCollection().complete(processedPage);             }              // Fetch new offset, and update minimum offsets.             newOffset = processedPage.getOffset();             minOffset = calculateMinOffset(processedPage);             processedPage.setMinOffset(minOffset);              // Record changes.             context.updatePagePointer(new PagePointer(newPageKey, newOffset, page.getLength(), minOffset));         }     }\n", "docstring": "processes page split result first split page replace existing page remaining pages need inserted children parent\n", "func_name": "367998"}
{"url": "367999", "code": "private ProjectFile handleDosExeFile(InputStream stream) throws Exception    {       File file = InputStreamHelper.writeStreamToTempFile(stream, \".tmp\");       InputStream is = null;        try       {          is = new FileInputStream(file);          if (is.available() > 1350)          {             StreamHelper.skip(is, 1024);              // Bytes at offset 1024             byte[] data = new byte[2];             is.read(data);              if (matchesFingerprint(data, WINDOWS_NE_EXE_FINGERPRINT))             {                StreamHelper.skip(is, 286);                 // Bytes at offset 1312                data = new byte[34];                is.read(data);                if (matchesFingerprint(data, PRX_FINGERPRINT))                {                   is.close();                   is = null;                   return readProjectFile(new P3PRXFileReader(), file);                }             }              if (matchesFingerprint(data, STX_FINGERPRINT))             {                StreamHelper.skip(is, 31742);                // Bytes at offset 32768                data = new byte[4];                is.read(data);                if (matchesFingerprint(data, PRX3_FINGERPRINT))                {                   is.close();                   is = null;                   return readProjectFile(new SureTrakSTXFileReader(), file);                }             }          }          return null;       }        finally       {          StreamHelper.closeQuietly(is);          FileHelper.deleteQuietly(file);       }    }\n", "docstring": "could self extracting archive understand format expand check content files read\n", "func_name": "367999"}
{"url": "368000", "code": "public String getAbsolutePath() {         StringBuilder pathBuilder = new StringBuilder(\"/\").append(this.getName());         AstNode parent = this.getParent();         while (parent != null) {             pathBuilder.insert(0, \"/\" + parent.getName());             parent = parent.getParent();         }         return pathBuilder.toString();     }\n", "docstring": "get current path node\n", "func_name": "368000"}
{"url": "368001", "code": "public static void convert( Rectangle2D_F64 input , Quadrilateral_F64 output ) {   output.a.x = input.p0.x;   output.a.y = input.p0.y;    output.b.x = input.p1.x;   output.b.y = input.p0.y;    output.c.x = input.p1.x;   output.c.y = input.p1.y;    output.d.x = input.p0.x;   output.d.y = input.p1.y;  } public static void convert( Rectangle2D_F64 input , Polygon2D_F64 output ) {   if (output.size() != 4)    throw new IllegalArgumentException(\"polygon of order 4 expected\");    output.get(0).set(input.p0.x, input.p0.y);   output.get(1).set(input.p1.x, input.p0.y);   output.get(2).set(input.p1.x, input.p1.y);   output.get(3).set(input.p0.x, input.p1.y);  } public static void convert( Polygon2D_F64 input , Quadrilateral_F64 output ) {   if( input.size() != 4 )    throw new IllegalArgumentException(\"Expected 4-sided polygon as input\");    output.a.set(input.get(0));   output.b.set(input.get(1));   output.c.set(input.get(2));   output.d.set(input.get(3));  } public static void convert( RectangleLength2D_I32 input , Quadrilateral_F64 output ) {   output.a.x = input.x0;   output.a.y = input.y0;    output.b.x = input.x0+input.width-1;   output.b.y = input.y0;    output.c.x = input.x0+input.width-1;   output.c.y = input.y0+input.height-1;    output.d.x = input.x0;   output.d.y = input.y0+input.height-1;  }\n", "docstring": "converts rectangle quadrilateral converts rectangle polygon converts polygon quadrilateral converts rectangle quadrilateral\n", "func_name": "368001"}
{"url": "368002", "code": "public static PluginResolver nullResolver(Mode mode, ErrorReporter reporter) {     return new PluginResolver(         mode, ImmutableMap.of(), ImmutableMap.of(), ImmutableMap.of(), reporter);   }\n", "docstring": "returns empty resolver useful tests situations known plugins needed\n", "func_name": "368002"}
{"url": "368003", "code": "public void setDeviceInstances(java.util.Collection<DeviceInstance> deviceInstances) {         if (deviceInstances == null) {             this.deviceInstances = null;             return;         }          this.deviceInstances = new java.util.ArrayList<DeviceInstance>(deviceInstances);     }\n", "docstring": "object containing information device instances\n", "func_name": "368003"}
{"url": "368004", "code": "public static Map<String, String> parseQuery(String uri) {         Map<String, String> map = new LinkedHashMap<>();         String query = URI.create(uri).getQuery();         if (query == null || query.equals(\"\")) {             return Collections.unmodifiableMap(map);         }         String[] params = query.split(\"&\");         for (String param : params) {             try {                 String[] pair = param.split(\"=\", 2);                 String name = URLDecoder.decode(pair[0], \"UTF-8\");                 if (name.equals(\"\")) {                     continue;                 }                 map.put(name, pair.length > 1 ? URLDecoder.decode(pair[1], \"UTF-8\") : \"\");             } catch (UnsupportedEncodingException e) {                 throw new RuntimeException(e);             }         }         return Collections.unmodifiableMap(map);     }\n", "docstring": "internal use\n", "func_name": "368004"}
{"url": "368005", "code": "synchronized void resumeStatsCollection(Timestamp now) {     for (Entry<String, Collection<MutableViewData>> entry : mutableMap.asMap().entrySet()) {       for (MutableViewData mutableViewData : entry.getValue()) {         mutableViewData.resumeStatsCollection(now);       }     }   }\n", "docstring": "resume stats collection mutable view data\n", "func_name": "368005"}
{"url": "368006", "code": "public void register(ConstraintConverter<? extends Constraint> c) {         java2json.put(c.getSupportedConstraint(), c);         json2java.put(c.getJSONId(), c);      }\n", "docstring": "register converter specific constraint\n", "func_name": "368006"}
{"url": "368007", "code": "public static List<String> readLines(Reader in) throws IOException  {   BufferedReader reader = buffer(in);   List<String> lines = new ArrayList<String>();   String line = reader.readLine();   while (line != null) {    lines.add(line);    line = reader.readLine();   }   return Collections.unmodifiableList(lines);  } public static List<String> readLines(InputStream in) throws IOException  {   return readLines(in, Charsets.DEFAULT);  } public static List<String> readLines(InputStream in, Charset charset)   throws IOException  {   return readLines(new InputStreamReader(in, charset));  }\n", "docstring": "reads lines given source code reader note returned code list immutable reads lines given source code input stream using system default set note returned code list immutable reads lines given source code input stream using specified set note returned code list immutable\n", "func_name": "368007"}
{"url": "368008", "code": "public SelectStep value(String value) {   return new SelectStep(element, value, SelectStep.OptionSelectorType.VALUE);  }\n", "docstring": "selects option value\n", "func_name": "368008"}
{"url": "368009", "code": "private void updateMatrix(int position, float offset) {         if (mDrawable != null && mScale > 0.0f) {             if (mPageCount == -1 && mAdapter != null) { // cache page count and translation values                 mPageCount = mAdapter.getCount();                 if (mPageCount > 1) {                     mPageX = (mDrawableWidth * mScale - mViewWidth) / (mPageCount - 1);                     mPageY = (mDrawableHeight * mScale - mViewHeight) / (mPageCount - 1);                 }             }             mMatrix.setTranslate(-mPageX * position - mPageX * offset,                     -mPageY * position - mPageY * offset);             mMatrix.preScale(mScale, mScale);             mView.setScaleType(MATRIX);             mView.setImageMatrix(mMatrix);         }     }\n", "docstring": "scale image translate according pager position offset\n", "func_name": "368009"}
{"url": "368010", "code": "public static String titleize(final String text, final String[] intCaps)     {         String str = text.toLowerCase(Locale.ENGLISH).replaceAll(\"[\\\\s_]+\", SPACE).trim();         return titleize(str, SPACE, intCaps);     }\n", "docstring": "converts given text title case smartly\n", "func_name": "368010"}
{"url": "368011", "code": "public static int cuGraphicsSubResourceGetMappedArray(CUarray pArray, CUgraphicsResource resource, int arrayIndex, int mipLevel)      {          return checkResult(cuGraphicsSubResourceGetMappedArrayNative(pArray, resource, arrayIndex, mipLevel));      }\n", "docstring": "get array access sub resource mapped graphics resource\n", "func_name": "368011"}
{"url": "368012", "code": "public void flushAll(boolean waitForAllToFinish) {         Log.v(Log.TAG_BATCHER, \"%s: flushing all objects (wait=%b)\", this, waitForAllToFinish);          synchronized (mutex) {             isFlushing = true;             unschedule();         }          while (true) {             ScheduledFuture future = null;             synchronized (mutex) {                 if (inbox.size() == 0)                     break; // Nothing to do                  final List<T> toProcess = new ArrayList<T>(inbox);                 inbox.clear();                 mutex.notifyAll();                 synchronized (workExecutor) {                     if (!workExecutor.isShutdown()) {                         future = workExecutor.schedule(new Runnable() {                             @Override                             public void run() {                                 processor.process(toProcess);                                 synchronized (mutex) {                                     lastProcessedTime = System.currentTimeMillis();                                 }                             }                         }, 0, TimeUnit.MILLISECONDS);                     }                 }             }              if (waitForAllToFinish) {                 if (future != null && !future.isDone() && !future.isCancelled()) {                     try {                         future.get();                     } catch (Exception e) {                         Log.e(Log.TAG_BATCHER, \"%s: Error while waiting for pending future \" +                                 \"when flushing all items\", e, this);                     }                 }             }         }          synchronized (mutex) {             isFlushing = false;         }     }\n", "docstring": "sends queued objects processor block method returns box objects processed\n", "func_name": "368012"}
{"url": "368013", "code": "public Vector3f absolute(Vector3f dest) {         dest.x = Math.abs(this.x);         dest.y = Math.abs(this.y);         dest.z = Math.abs(this.z);         return dest;     }\n", "docstring": "non java doc\n", "func_name": "368013"}
{"url": "368014", "code": "public static void setPreference( String preferenceKey, String value ) {         if (preferencesDb != null) {             preferencesDb.setPreference(preferenceKey, value);             return;         }          Preferences preferences = Preferences.userRoot().node(GuiBridgeHandler.PREFS_NODE_NAME);         if (value != null) {             preferences.put(preferenceKey, value);         } else {             preferences.remove(preferenceKey);         }     }\n", "docstring": "set preference\n", "func_name": "368014"}
{"url": "368015", "code": "private boolean makeComplete( TestCaseDef testCase, VarTupleSet tuples, List<VarDef> vars)     {     boolean complete;      // Test case still missing a required property?     if( testCase.isSatisfied())       {       // No, complete bindings for remaining variables       complete = completeSatisfied( testCase, tuples, vars);       }     else       {       // Yes, find tuples that contain satisfying bindings.       int prevBindings = testCase.getBindingCount();       Iterator<Tuple> satisfyingTuples = getSatisfyingTuples( testCase, tuples);       for( complete = false;             satisfyingTuples.hasNext()              && !(                // Does this tuple lead to satisfaction of all current test case conditions?                makeSatisfied( testCase, tuples, satisfyingTuples.next())                 // Can we complete bindings for remaining variables?                && (complete = completeSatisfied( testCase, tuples, vars)));             // No, try next tuple            testCase.revertBindings( prevBindings));       }      return complete;     }\n", "docstring": "using selections given set tuples completes binding remaining variables returns variables bound\n", "func_name": "368015"}
{"url": "368016", "code": "public synchronized void addToJoinNoException(ISynchronizationPoint<?> sp) {    nbToJoin++;    sp.listenInline(new Runnable() {     @Override     public void run() {      joined();     }    });    if (Threading.debugSynchronization) ThreadingDebugHelper.registerJoin(this, sp);   }\n", "docstring": "register given synchronization point waited event join point number waited events incremented listener added synchronization point synchronization point unblock whatever succeed error cancelled joined method called\n", "func_name": "368016"}
{"url": "368017", "code": "public void setCustomTargeting(com.google.api.ads.admanager.axis.v201811.CustomCriteriaSet customTargeting) {         this.customTargeting = customTargeting;     }\n", "docstring": "sets custom targeting value targeting\n", "func_name": "368017"}
{"url": "368018", "code": "@Override  public CPMeasurementUnit fetchByPrimaryKey(Serializable primaryKey) {   Serializable serializable = entityCache.getResult(CPMeasurementUnitModelImpl.ENTITY_CACHE_ENABLED,     CPMeasurementUnitImpl.class, primaryKey);    if (serializable == nullModel) {    return null;   }    CPMeasurementUnit cpMeasurementUnit = (CPMeasurementUnit)serializable;    if (cpMeasurementUnit == null) {    Session session = null;     try {     session = openSession();      cpMeasurementUnit = (CPMeasurementUnit)session.get(CPMeasurementUnitImpl.class,       primaryKey);      if (cpMeasurementUnit != null) {      cacheResult(cpMeasurementUnit);     }     else {      entityCache.putResult(CPMeasurementUnitModelImpl.ENTITY_CACHE_ENABLED,       CPMeasurementUnitImpl.class, primaryKey, nullModel);     }    }    catch (Exception e) {     entityCache.removeResult(CPMeasurementUnitModelImpl.ENTITY_CACHE_ENABLED,      CPMeasurementUnitImpl.class, primaryKey);      throw processException(e);    }    finally {     closeSession(session);    }   }    return cpMeasurementUnit;  }\n", "docstring": "returns measurement unit primary key returns code null code could found\n", "func_name": "368018"}
{"url": "368019", "code": "public int addInventory(MalisisInventory inventory)  {   inventories.put(nexInventoryId, inventory);   inventory.setInventoryId(nexInventoryId);   inventory.addOpenedContainer(this);   if (isServer())    inventoryCaches.put(inventory, new InventoryCache(owner, inventory, windowId));   return nexInventoryId++;  }\n", "docstring": "adds link malis inventory link malis inventory container\n", "func_name": "368019"}
{"url": "368020", "code": "public Observable<Page<FeatureResultInner>> list1NextAsync(final String nextPageLink) {         return list1NextWithServiceResponseAsync(nextPageLink)             .map(new Func1<ServiceResponse<Page<FeatureResultInner>>, Page<FeatureResultInner>>() {                 @Override                 public Page<FeatureResultInner> call(ServiceResponse<Page<FeatureResultInner>> response) {                     return response.body();                 }             });     }\n", "docstring": "gets preview features provider namespace available fec subscription\n", "func_name": "368020"}
{"url": "368021", "code": "@Override     public ItemStream findFirstMatching(Filter filter) throws MessageStoreException     {         if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())             SibTr.entry(this, tc, \"findFirstMatching\", filter);          if (_rootMembership != null)         {             ItemStream item = _rootMembership.findFirstMatchingItemStream(filter);              if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())                 SibTr.exit(this, tc, \"findFirstMatching\", item);             return item;         }         else         {             MessageStoreUnavailableException msue;             if (!_startupExceptions.isEmpty())             {                 if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled())                     SibTr.event(this, tc, \"Operation not possible as MessageStore failed to start!\");                 msue = new MessageStoreUnavailableException(\"Operation not possible as MessageStore failed to start!\", _startupExceptions.get(0));             }             else             {                 if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled())                     SibTr.event(this, tc, \"Operation not possible as MessageStore is unavailable!\");                 msue = new MessageStoreUnavailableException(\"Operation not possible as MessageStore is unavailable!\");             }              if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())                 SibTr.exit(this, tc, \"findFirstMatching\");             throw msue;         }     }\n", "docstring": "non java doc\n", "func_name": "368021"}
{"url": "368022", "code": "private List<SecurityConstraint> getConstraintsFromHttpMethodElement(SecurityMetadata securityMetadataFromDD, Collection<String> urlPatterns,                                                                          ServletSecurityElement servletSecurity) {         List<SecurityConstraint> securityConstraints = new ArrayList<SecurityConstraint>();         Collection<HttpMethodConstraintElement> httpMethodConstraints = servletSecurity.getHttpMethodConstraints();         for (HttpMethodConstraintElement httpMethodConstraint : httpMethodConstraints) {             String method = httpMethodConstraint.getMethodName();             List<String> methods = new ArrayList<String>();             methods.add(method);             WebResourceCollection webResourceCollection = new WebResourceCollection((List<String>) urlPatterns, methods, new ArrayList<String>(), securityMetadataFromDD.isDenyUncoveredHttpMethods());             List<WebResourceCollection> webResourceCollections = new ArrayList<WebResourceCollection>();             webResourceCollections.add(webResourceCollection);             securityConstraints.add(createSecurityConstraint(securityMetadataFromDD, webResourceCollections, httpMethodConstraint, false));          }         return securityConstraints;     }\n", "docstring": "gets security constraints http method constraint elements defined given ser let security element given list url patterns\n", "func_name": "368022"}
{"url": "368023", "code": "private void populateDistSetTypeNameCombo() {         distsetTypeNameComboBox.setContainerDataSource(getDistSetTypeLazyQueryContainer());         distsetTypeNameComboBox.setItemCaptionPropertyId(SPUILabelDefinitions.VAR_NAME);         distsetTypeNameComboBox.setValue(getDefaultDistributionSetType().getId());     }\n", "docstring": "populate distribution set type name combo\n", "func_name": "368023"}
{"url": "368024", "code": "@Deprecated   public static void createAndRegisterWithProjectIdAndMonitoredResource(       String projectId, Duration exportInterval, MonitoredResource monitoredResource)       throws IOException {     checkNotNull(projectId, \"projectId\");     checkNotNull(exportInterval, \"exportInterval\");     checkNotNull(monitoredResource, \"monitoredResource\");     createInternal(         null, projectId, exportInterval, monitoredResource, null, DEFAULT_CONSTANT_LABELS);   }\n", "docstring": "creates stack driver stats exporter explicit project custom monitored resource\n", "func_name": "368024"}
{"url": "368025", "code": "protected ReferenceContext createReferenceContext(BeanMetaData bmd) // F743-29417     {         final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();         if (isTraceOn && tc.isEntryEnabled())             Tr.entry(tc, \"createReferenceContext: \" + bmd.j2eeName);          if (bmd.ivReferenceContext == null) {             bmd.ivReferenceContext = getInjectionEngine().createReferenceContext();             bmd.ivReferenceContext.add(new ComponentNameSpaceConfigurationProviderImpl(bmd, this)); // F85115         }          if (isTraceOn && tc.isEntryEnabled())             Tr.exit(tc, \"createReferenceContext\", bmd.ivReferenceContext);         return bmd.ivReferenceContext;     }\n", "docstring": "creates reference context ejb\n", "func_name": "368025"}
{"url": "368026", "code": "public void marshall(CreateCoreDefinitionVersionRequest createCoreDefinitionVersionRequest, ProtocolMarshaller protocolMarshaller) {          if (createCoreDefinitionVersionRequest == null) {             throw new SdkClientException(\"Invalid argument passed to marshall(...)\");         }          try {             protocolMarshaller.marshall(createCoreDefinitionVersionRequest.getAmznClientToken(), AMZNCLIENTTOKEN_BINDING);             protocolMarshaller.marshall(createCoreDefinitionVersionRequest.getCoreDefinitionId(), COREDEFINITIONID_BINDING);             protocolMarshaller.marshall(createCoreDefinitionVersionRequest.getCores(), CORES_BINDING);         } catch (Exception e) {             throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);         }     }\n", "docstring": "marshall given parameter object\n", "func_name": "368026"}
{"url": "368027", "code": "public WebSocket rtm(HttpUrl url, WebSocketListener listener) {     return httpClient.newWebSocket(new Request.Builder()         .url(url)         .build(), listener);   }\n", "docstring": "see https api slack com\n", "func_name": "368027"}
{"url": "368028", "code": "public OrganizationCreateResponse createOrganization(OrganizationCreate data) {    return getResourceFactory().getApiResource(\"/org/\")      .entity(data, MediaType.APPLICATION_JSON_TYPE)      .post(OrganizationCreateResponse.class);   }\n", "docstring": "creates organization\n", "func_name": "368028"}
{"url": "368029", "code": "public Component getComponentByName(String strName, Container parent)     {         for (int i = 0; i < parent.getComponentCount(); i++)         {             Component component = parent.getComponent(i);             if (strName.equals(component.getName()))                 return component;             if (component instanceof Container)             {                 component = this.getComponentByName(strName, (Container)component);                 if (component != null)                     return component;             }         }         return null;    // Not found     }\n", "docstring": "get sub component name\n", "func_name": "368029"}
{"url": "368030", "code": "public IGeoPoint fromPixels(final int pPixelX, final int pPixelY, final GeoPoint pReuse) {   return fromPixels(pPixelX, pPixelY, pReuse, false);  } public IGeoPoint fromPixels(final int pPixelX, final int pPixelY, final GeoPoint pReuse, boolean forceWrap) {   //reverting https://github.com/osmdroid/osmdroid/issues/459   //due to relapse of https://github.com/osmdroid/osmdroid/issues/507   //reverted functionality is now on the method fromPixelsRotationSensitive   return mTileSystem.getGeoFromMercator(getCleanMercator(getMercatorXFromPixel(pPixelX), horizontalWrapEnabled),     getCleanMercator(getMercatorYFromPixel(pPixelY), verticalWrapEnabled), mMercatorMapSize, pReuse,     horizontalWrapEnabled || forceWrap, verticalWrapEnabled || forceWrap);  }\n", "docstring": "note note\n", "func_name": "368030"}
{"url": "368031", "code": "public void verbose(String format, Object... extra) {     if (shouldLog(VERBOSE)) {       Log.v(tag, String.format(format, extra));     }   }\n", "docstring": "log verbose message\n", "func_name": "368031"}
{"url": "368032", "code": "public static String generatePreSignedUrl(String awsAccessKey, String awsSecretAccessKey, String method,                                        String bucket, String key, long expirationDate) {         Map headers = new HashMap();         if (method.equalsIgnoreCase(\"PUT\")) {             headers.put(\"x-amz-acl\", Collections.singletonList(\"public-read\"));         }         return Utils.generateQueryStringAuthentication(awsAccessKey, awsSecretAccessKey, method,                                                        bucket, key, new HashMap(), headers,                                                        expirationDate);     }\n", "docstring": "use helper method generate pre signed urls use ping need generate urls put delete http methods example access key bcd secret access key want node write information ping demo cluster node bucket ping key demo cluster node want expire one year system current time mill let assume equals\n", "func_name": "368032"}
{"url": "368033", "code": "public boolean isRemoteCache( String cacheName )     {         if ( remotePatterns == null )         {             return false;         }          String[] patterns = remotePatterns.split( \",\" );         for ( String pattern : patterns )         {             if ( isNotBlank( pattern ) )             {                 if ( cacheName.matches( pattern ) || cacheName.equals( pattern ) )                 {                     return true;                 }             }         }          return false;     }\n", "docstring": "utils\n", "func_name": "368033"}
{"url": "368034", "code": "public String invokeOperationToString(ObjectName name, String operName, String... paramStrings) throws Exception {   return ClientUtils.valueToString(invokeOperation(name, operName, paramStrings));  }\n", "docstring": "invoke method array parameter strings\n", "func_name": "368034"}
{"url": "368035", "code": "public static vpnsessionpolicy_aaagroup_binding[] get(nitro_service service, String name) throws Exception{   vpnsessionpolicy_aaagroup_binding obj = new vpnsessionpolicy_aaagroup_binding();   obj.set_name(name);   vpnsessionpolicy_aaagroup_binding response[] = (vpnsessionpolicy_aaagroup_binding[]) obj.get_resources(service);   return response;  }\n", "docstring": "use api fetch vpn session policy aaa group binding resources given name\n", "func_name": "368035"}
{"url": "368036", "code": "public synchronized void start() throws Exception {         if (!isRunning()) {             MetadataFinder.getInstance().addLifecycleListener(lifecycleListener);             MetadataFinder.getInstance().start();             MetadataFinder.getInstance().addTrackMetadataListener(metadataListener);              WaveformFinder.getInstance().addLifecycleListener(lifecycleListener);             WaveformFinder.getInstance().setFindDetails(true);             WaveformFinder.getInstance().start();             WaveformFinder.getInstance().addWaveformListener(waveformListener);              BeatGridFinder.getInstance().addLifecycleListener(lifecycleListener);             BeatGridFinder.getInstance().start();             BeatGridFinder.getInstance().addBeatGridListener(beatGridListener);              queueHandler = new Thread(new Runnable() {                 @Override                 public void run() {                     while (isRunning()) {                         try {                             handleUpdate(pendingUpdates.take());                         } catch (InterruptedException e) {                             // Interrupted due to one of our finders shutting down, presumably.                         } catch (Throwable t) {                             logger.error(\"Problem processing track signature update\", t);                         }                     }                 }             });             running.set(true);             queueHandler.start();             deliverLifecycleAnnouncement(logger, true);             checkExistingTracks();         }     }\n", "docstring": "start finding waveforms active players starts link metadata finder already running need send metadata updates notice tracks loaded turn starts link device finder keep track comings goings players also start link waveform finder link beat grid finder order get pieces information need computing track signatures\n", "func_name": "368036"}
{"url": "368037", "code": "public Object[] toArray() {          Object[] newArray = (Object[]) Array.newInstance(             elementData.getClass().getComponentType(), elementCount);          System.arraycopy(elementData, 0, newArray, 0, elementCount);          return newArray;     } public Object toArray(Object a) {          if (Array.getLength(a) < elementCount) {             a = Array.newInstance(a.getClass().getComponentType(),                                   elementCount);         }          System.arraycopy(elementData, 0, a, 0, elementCount);          return a;     }\n", "docstring": "fred copies elements list assumed correct type small array type returned larger list elements copied change made array differs implementation java util array list second aspect\n", "func_name": "368037"}
{"url": "368038", "code": "public void lcd(String path) throws SftpStatusException {   File actual;    if (!isLocalAbsolutePath(path)) {    actual = new File(lcwd, path);   } else {    actual = new File(path);   }    if (!actual.isDirectory()) {    throw new SftpStatusException(SftpStatusException.SSH_FX_FAILURE,      path + \" is not a directory\");   }    try {    lcwd = actual.getCanonicalPath();   } catch (IOException ex) {    throw new SftpStatusException(SftpStatusException.SSH_FX_FAILURE,      \"Failed to canonicalize path \" + path);   }  }\n", "docstring": "changes local working directory\n", "func_name": "368038"}
{"url": "368039", "code": "@XmlElementDecl(namespace = \"\", name = \"symbol\", scope = LocationType.class)     public JAXBElement<LocationType.Symbol> createLocationTypeSymbol(LocationType.Symbol value) {         return new JAXBElement<LocationType.Symbol>(_LocationTypeSymbol_QNAME, LocationType.Symbol.class, LocationType.class, value);     }\n", "docstring": "create instance link axb element code link location type symbol code\n", "func_name": "368039"}
{"url": "368040", "code": "ChronoEntity<?> update(         ChronoEntity<?> entity,         ChronoEntity<?> parsed     ) {          if (!parsed.contains(FractionalElement.FRACTION)) {             return entity;         }          BigDecimal fraction = parsed.get(FractionalElement.FRACTION);         int min = entity.getMinimum(this.element).intValue();         int max = entity.getMaximum(this.element).intValue();         int num = this.getRealValue(fraction, min, max);          parsed.with(FractionalElement.FRACTION, null); // mutable         parsed.with(this.element, num); // mutable          return entity.with(this.element, num);      }\n", "docstring": "ali sier das proto che parse geb mit dem rich tige wert\n", "func_name": "368040"}
{"url": "368041", "code": "@Override     public Stream setMemoryLoad(Number onHeap, Number offHeap) {         _node.setMemoryLoad(onHeap, offHeap);         return this;     }\n", "docstring": "sets memory load resources current operation\n", "func_name": "368041"}
{"url": "368042", "code": "public void setProvisioningArtifactViews(java.util.Collection<ProvisioningArtifactView> provisioningArtifactViews) {         if (provisioningArtifactViews == null) {             this.provisioningArtifactViews = null;             return;         }          this.provisioningArtifactViews = new java.util.ArrayList<ProvisioningArtifactView>(provisioningArtifactViews);     }\n", "docstring": "array objects information product views provisioning artifacts\n", "func_name": "368042"}
{"url": "368043", "code": "private List<Resource> findImportedResources(final String resourceUri, final String cssContent)     throws IOException {     // it should be sorted     final List<Resource> imports = new ArrayList<Resource>();     final String css = cssContent;     final List<String> foundImports = findImports(css);     for (final String importUrl : foundImports) {       final Resource importedResource = createImportedResource(resourceUri, importUrl);       // check if already exist       if (imports.contains(importedResource)) {         LOG.debug(\"[WARN] Duplicate imported resource: {}\", importedResource);       } else {         imports.add(importedResource);         onImportDetected(importedResource.getUri());       }     }     return imports;   }\n", "docstring": "find set imported resources inside given resource\n", "func_name": "368043"}
{"url": "368044", "code": "private void dataBufferFlush() throws SAXException {         int saveLine = line;         int saveColumn = column;         line = linePrev;         column = columnPrev;         if ((currentElementContent == CONTENT_ELEMENTS) && (dataBufferPos > 0)                 && !inCDATA) {             // We can't just trust the buffer to be whitespace, there             // are (error) cases when it isn't             for (int i = 0; i < dataBufferPos; i++) {                 if (!isWhitespace(dataBuffer[i])) {                     handler.charData(dataBuffer, 0, dataBufferPos);                     dataBufferPos = 0;                 }             }             if (dataBufferPos > 0) {                 handler.ignorableWhitespace(dataBuffer, 0, dataBufferPos);                 dataBufferPos = 0;             }         } else if (dataBufferPos > 0) {             handler.charData(dataBuffer, 0, dataBufferPos);             dataBufferPos = 0;         }         line = saveLine;         column = saveColumn;     }\n", "docstring": "flush contents data buffer handler appropriate reset buffer input\n", "func_name": "368044"}
{"url": "368045", "code": "public static <T> String extractNgram(List<T> list, int start, int end) {      if (start < 0 || end > list.size() || start >= end) return null;      final StringBuilder sb = new StringBuilder();      // TODO: iterator      for (int i = start; i < end; i++) {        T o = list.get(i);        if (sb.length() != 0) sb.append(\" \");        sb.append((o instanceof HasWord) ? ((HasWord) o).word() : o.toString());      }      return sb.toString();    }\n", "docstring": "returns substring sentence start inclusive end exclusive\n", "func_name": "368045"}
{"url": "368046", "code": "private boolean isInCategory(String myCategory, String categoryList) {         StringTokenizer st = new StringTokenizer(categoryList, \"+\");         while (st.hasMoreTokens()) {             if (myCategory.equals(st.nextToken()))                 return true;         }         return false;     }\n", "docstring": "method\n", "func_name": "368046"}
